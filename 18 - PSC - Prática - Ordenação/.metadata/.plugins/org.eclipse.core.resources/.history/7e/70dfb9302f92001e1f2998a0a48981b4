package exercicio;

public class Ordenacao {
	public int[] bubbleSort(int[] v) {
		int i, fim, aux;
		for (fim = v.length - 1; fim > 0; fim--) {
			for (i = 0; i < fim; i++) {
				if (v[i] > v[i + 1]) {
					aux = v[i];
					v[i] = v[i + 1];
					v[i + 1] = aux;
				}
			}
		}
		return v;
	}

	public void selectionSort(int[] v) {
		int n = v.length;
		int i, j, min, aux;
		for (i = 0; i < n - 1; i++) {
			min = i;
			for (j = i + 1; j < n; j++) {
				if (v[j] < v[min]) {
					min = j;
				}
			}
			if (v[i] != v[min]) {
				aux = v[i];
				v[i] = v[min];
				v[min] = aux;
			}
		}

	}

	void insertionSort(int[] v) {
		int n = v.length;
		int i = 0;
		int j = 1;
		int aux = 0;

		while (j < n) {
			aux = v[j];
			i = j - 1;

			while (i >= 0 && v[i] > aux) {
				v[i + 1] = v[i];
				i = i - 1;
			}

			v[i + 1] = aux;
			j = j + 1;
		}
	}

	public void quickSort(int v[], int esq, int dir) {
		if (esq < dir) {
			int p = part(v, esq, dir);
			quickSort(v, esq, p);
			quickSort(v, p + 1, dir);
		}
	}

	public int part(int v[], int esq, int dir) {
		int meio = (int) (esq + dir) / 2;
		int pivo = v[meio];
		int i = esq - 1;
		int j = dir + 1;
		while (true) {
			do {
				i++;
			} while (v[i] < pivo);
			do {
				j--;
			} while (v[j] > pivo);
			if (i >= j) {
				return j;
			}
			int aux = v[i];
			v[i] = v[j];
			v[j] = aux;
		}
	}

	void mergeSort(int rows, int cols, int matrix[rows][cols], int v[rows*cols], int w[rows*cols]) {
	    int ini = 0;
	    int fim = rows * cols - 1;
	    for (int i = 0; i < rows * cols; i++) {
	        v[i] = matrix[i / cols][i % cols];
	    }

	    if (ini < fim) {
	        int meio = (ini + fim) / 2;
	        mergeSort(rows, cols, matrix, v, w);
	        mergeSort(rows, cols, matrix, v + meio + 1, w);
	        intercalar(rows, cols, ini, meio, fim, v, w);
	    }

	    for (int i = 0; i < rows * cols; i++) {
	        matrix[i / cols][i % cols] = v[i];
	    }
	}

	void intercalar(int rows, int cols, int ini, int meio, int fim, int v[], int w[]) {
		for (int k = ini; k <= fim; k++) {
			w[k] = v[k];
		}

		int i = ini;
		int j = meio + 1;

		for (int k = ini; k <= fim; k++) {
			if (i > meio) {
				v[k] = w[j++];
			} else if (j > fim) {
				v[k] = w[i++];
			} else if (w[i] < w[j]) {
				v[k] = w[i];
			} else {
				v[k] = w[j];
			}

		}
	}

}
